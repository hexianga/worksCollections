codepen：CodePen 是一个完全免费的前端代码托管服务
相比GitHub Pages，博客子目录的优点：
1.即时预览。你甚至可以本地修改并即时预览别人的作品。
2.支持多种主流预处理器（https://codepen.io/versions/）。你从不需要手写生产级别的代码，无论是 Jade 、 LESS 、 Sass ，还是 CoffeeScript 、 es6+（ Babel ），都能尽情使用。
3.快速添加外部资源文件。只需在输入框里输入库名， CodePen 就会从 cdnjs 上寻找匹配的 css 或 js 库。
免费用户支持创建三个模板，不是每个作品都需要从白板开始。
4.有 fork 功能，用于“备份他人优秀作品，防止未来该作品消失了或者变了样子”。
5.版本：
Alpha：内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。
Beta：测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。
GA:General Availability,正式发布的版本
RC：RC就是Release Candidate（候选版本）的简称，Candidate是候选人的意思，用在软件上就是候选版本。几乎就不会加入新的功能了，而主要着重于除错!
6.如果是在运行时转义ES6和JSX语法那么浏览器会提示警告，使用编译后的JS文件就不会出现这个问题。

noscript 元素用来定义在脚本未被执行时的替代内容（文本）。

7.棋盘有三个组成部分：
Square(方格)
Board(棋盘)
Game(游戏)
Square(方格) 组件渲染为一个单独的 <button>， 
Board(棋盘) 会渲染为 9 个 Square(方格) ，
而 Game(游戏) 组件会渲染为一个 Board(棋盘)

两处错误：
1.类后面不加()
2.继承的类React.component拼写错误，className拼写错误。导致运行错误


8.交互式组件:在JSX代码中添加onClick事件处理函数

9.state状态：React 组件可以通过在构造函数中设置 this.state 来拥有 state(状态) ，构造函数应该被认为是组件的私有。 
让我们在 Square(方格) 组件的 state(状态) 中存储当前值，并在单击方格时更改它。
this.state.value：实时显示的是state中的状态值

10.开发者工具：在浏览器的开发者工具中检查 React 组件树。

11.State(状态) 提升:
最好的解决办法是将 state(状态) 存储在 Board(棋盘) 组件中，而不是在每个 Square(方格) 组件中 
当您要聚合来自多个子节点的数据 或 使两个子组件之间相互通信时，提升 state(状态) ，使其存储在父组件中。
父组件可以通过 props(属性) 把 state(状态) 传递回子组件，以使子组件始终与父组件同步。

12.在 React 应用程序中，使用 on* 名称作为其处理程序 prop(属性) 名称 ，handle* 作为其实现的名称是一个常见的约定。

13.不可变数据的重要性(所以有很多const的声明)：
    1.避免数据改变使我们能够保留对旧数据的引用，如果我们需要在它们之间切换。
    2.确定不可变对象如何改变是非常容易的。如果被引用的对象与之前不同，那么对象已经改变了。
      确定可变对象是否已更改是复杂的，需要将当前对象与先前的副本进行比较，遍历整个对象树，并比较每个变量和值。
    3.不可变数据可以更容易地确定是否已经进行了更改，这也有助于确定组件何时需要重新渲染。

14.棋盘方法中的i参数是在渲染的render方法中传进去的。

15.每当 Board(棋盘) 组件的 state(状态) 发生变化时， Square(方格) 组件会自动重新渲染。Square是受控组件

16.函数式组件：当不对React.Component类进行扩展，只写一个render方法时，可以将类写成函数的形式，这样的一个组件就叫做函数是组件。

17.实现X和O轮流下棋，实现status的实时变化，宣布获胜者

18.存储历史记录：要是可以重新访问 Board(棋盘) 组件的旧 state(状态) ，那么我们可以看到之前的任何一个动作之后的
棋面。每下一步棋，我们创建一个新的 squares 数组。这意味着我们可以轻松地存储 Board(棋盘) 组件过去的 state(状态)。

19.之前把这个 state(状态) 从 Square(方格) 组件拉到 Board(棋盘) 组件上，现在再将它从 Board(棋盘) 组件拉到 
Game(游戏) 组件上 - 所以顶级 Game(游戏) 组件拥有所需的所有信息。





