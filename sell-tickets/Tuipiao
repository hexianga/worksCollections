import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

public class Tuipiao extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	// 界面组件声明
	JLabel lname, ltime, name, time;
	Date date;
	SimpleDateFormat format;
	// 声明数据库操作中用到的对象
	Connection con;
	PreparedStatement sql;
	ResultSet result1, result2;
	String SQL;
	String[][] data;
	String[] column = { "车次", "始发站", "终点站", "发车时间", "到站时间", "票价", "历经天数",
			"订票时间" };
	// 表格中用到的对象声明
	JButton toReser,exit; 
	TableColumn col;
	JTable table;
	DefaultTableModel datas;
	DefaultTableCellRenderer renderer;
	JTableHeader tableHeader;
	Font font;
	DefaultTableModel tableModel;
	JButton order;
	JLabel label;

	public Tuipiao() {
		init();
		setVisible(true);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		int width = 1000, height = 600;
		int x = (Toolkit.getDefaultToolkit().getScreenSize().width - width) / 2;
		int y = (Toolkit.getDefaultToolkit().getScreenSize().height - height) / 2;
		setBounds(x, y, width, height);
		setTitle("我的订单");
	}

	public void init() {
		date = new Date();
		format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		lname = new JLabel("用户：");
		lname.setFont(new Font("微软雅黑", Font.BOLD, 20));
		name = new JLabel();
		name.setFont(new Font("微软雅黑", Font.BOLD, 20));
		ltime = new JLabel("登录时间：");
		ltime.setFont(new Font("微软雅黑", Font.BOLD, 20));
		time = new JLabel();
		time.setFont(new Font("微软雅黑", Font.BOLD, 20));
		toReser = new JButton("回到订票界面");
		exit = new JButton("退出登录");
		
		setLayout(null);
		lname.setBounds(110, 7, 80, 30);
		name.setBounds(170, 7, 80, 30);
		ltime.setBounds(270, 7, 100, 30);
		time.setBounds(390, 7, 230, 30);
		toReser.setBounds(660, 7, 150, 30);
		exit.setBounds(820, 7, 150, 30);
		
		add(lname);
		add(name);
		add(ltime);
		add(time);
		add(toReser);
		add(exit);
		
		toReser.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				new Reservation();
				dispose();
			}
		});
		exit.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				User_Login_Input.user_name="";
				new Reservation();
				dispose();
			}
			
		});
		name.setText(User_Login_Input.user_name);
		time.setText(format.format(date));

		getReserData();

		order = new JButton("退票");
		label = new JLabel();
		label.setLayout(null);
		order.setBounds(7, 3, 70, 20);
		label.add(order);

		// 声明数据模型同时声明是否可编辑
		datas = new DefaultTableModel(data, column) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {
				if (column == 8)
					return true;
				else {
					return false;
				}
			}
		};
		table = new JTable(datas);
		// 添加新列
		tableModel = (DefaultTableModel) table.getModel();
		tableModel.addColumn("退票");
		// 给新列添加渲染器
		table.getColumnModel().getColumn(8)
				.setCellRenderer(new DefaultTableCellRenderer() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					public Component getTableCellRendererComponent(
							JTable table, Object value, boolean isSelected,
							boolean hasFocus, int row, int column) {
						if (column == 8) {
							return label;
						} else {
							return null;
						}
					}
				});

		table.getColumnModel().getColumn(8).setCellEditor(new Ordereditor());
		// 一系列的表格样式设置开始
		table.setRowHeight(28);
		table.setSelectionBackground(new Color(134, 250, 183));
		table.setSelectionForeground(new Color(250, 5, 22));
		col = table.getColumnModel().getColumn(3);
		col.setPreferredWidth(170);
		col = table.getColumnModel().getColumn(7);
		col.setPreferredWidth(180);
		table.setFont(new Font("宋体", Font.HANGING_BASELINE, 16));
		renderer = new DefaultTableCellRenderer();
		renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
		table.setDefaultRenderer(Object.class, renderer);
		tableHeader = table.getTableHeader();
		tableHeader.setPreferredSize(new Dimension(table.getWidth(), 30));
		font = new Font("微软雅黑", Font.HANGING_BASELINE, 16);
		tableHeader.setFont(font);
		tableHeader.setBackground(new Color(71, 229, 138));
		// tableHeader.setForeground(Color.blue);
		// 一系列的表格样式设置结束
		JScrollPane scroll = new JScrollPane(table);
		scroll.setBounds(10, 40, 970, 500);

		add(scroll);
	}

	// 连接数据库
	public void ConnectionDB() {
		try {
			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		} catch (ClassNotFoundException e) {
			System.out.print(e);
		}
		try {
			con = DriverManager.getConnection("jdbc:odbc:Sell Tickets", "", "");
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

	// 获取初始北京到天津的票务信息
	public void getReserData() {
		try {
			
			ConnectionDB();
			// 获取初始数据集
			SQL = "select * from reser where member_name='"
					+ User_Login_Input.user_name + "'";
			sql = con.prepareStatement(SQL);
			result1 = sql.executeQuery();
			// 获取数据集的记录数
			SQL = "select count(*) as totalcount from reser where member_name='"
					+ User_Login_Input.user_name + "'";
			sql = con.prepareStatement(SQL);
			result2 = sql.executeQuery();
			int rowCount = 0;
			if (result2.next()) {
				rowCount = result2.getInt("totalcount");
			}

			data = new String[rowCount + 25][8];

			for (int i = 0; result1.next(); i++) {
				data[i][0] = result1.getString(3);
				data[i][1] = result1.getString(4);
				data[i][2] = result1.getString(5);
				data[i][3] = result1.getString(6);
				data[i][4] = result1.getString(7);
				data[i][5] = result1.getString(8);
				data[i][6] = result1.getString(9);
				data[i][7] = result1.getString(10);
			}
			con.close();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

	class Ordereditor extends AbstractCellEditor implements TableCellEditor,
			ActionListener {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		Connection con;
		PreparedStatement sql;
		String SQL;
		JButton order;
		JLabel label;

		public Ordereditor() {
			order = new JButton("退票");
			order.addActionListener(this);
			label = new JLabel();
			label.setLayout(null);
			order.setBounds(7, 3, 70, 20);
			label.add(order);
		}

		// 连接数据库
		public void ConnectionDB() {
			try {
				Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
			} catch (ClassNotFoundException e) {
				System.out.print(e);
			}
			try {
				con = DriverManager.getConnection("jdbc:odbc:Sell Tickets", "",
						"");
			} catch (SQLException e) {
				System.out.println(e);
			}
		}

		public void actionPerformed(ActionEvent arg0) {
//			 向用户确认是否退票
			 int n = JOptionPane.showConfirmDialog(null, "您确定要取消此订单吗?", "确认对话框",
			 JOptionPane.YES_NO_CANCEL_OPTION);
			 // 0表示点击了确认和是
			 if (n != 0) {
				 return;
			 }
//			System.out.println("响应成功！");
			
//			获取选中行的出发时间数据
			int index = table.getSelectedRow();
			String time = (String) table.getValueAt(index, 3);
			String start_station = (String) table.getValueAt(index, 1);
			String end_station = (String) table.getValueAt(index, 2);
			
			try {
				ConnectionDB();
				con.setAutoCommit(false);
SQL = "delete from reser where start_date=#"+time+"# and member_name='"+User_Login_Input.user_name+"'";
				sql = con.prepareStatement(SQL);
				sql.executeUpdate();
//				if(sql.executeUpdate() >= 1){
//					JOptionPane.showMessageDialog(null, "退票成功！", "提示信息",
//							JOptionPane.INFORMATION_MESSAGE);
//				}else{
//					JOptionPane.showMessageDialog(null, "退票失败！", "提示信息",
//							JOptionPane.ERROR_MESSAGE);
//				}
				
//				数据库中相应路线的票数加一,如何给对应字段值加一？？		
SQL = "update Tickets set tiket_remain_tickets=(tiket_remain_tickets+1) where " +
"tiket_start_date=#"+time+"# and tiket_start_station='"+start_station+"' and tiket_end_station='"+end_station+"'";
//	System.out.println(SQL);
				sql = con.prepareStatement(SQL);
				sql.executeUpdate();
				
//				提交事务
				con.commit();
				con.close();
				JOptionPane.showMessageDialog(null, "退票成功！", "提示信息",
						JOptionPane.INFORMATION_MESSAGE);
				
				
//				if(sql.executeUpdate() != 1){
//					JOptionPane.showMessageDialog(null, "退票失败！", "提示信息",
//							JOptionPane.ERROR_MESSAGE);
//				}
			} catch (SQLException e) {
				try{
					con.rollback();
					JOptionPane.showMessageDialog(null, "退票失败！", "提示信息",
							JOptionPane.ERROR_MESSAGE);
				}catch(SQLException exp){
					exp.printStackTrace();
				}
				
			}
		}

		public Object getCellEditorValue() {
			return null;
		}
		public Component getTableCellEditorComponent(JTable table,
				Object value, boolean isSelected, int row, int column) {
			return label;
		}

	}

}
